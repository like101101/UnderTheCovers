Traceback (most recent call last):
  File "/opt/conda/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/conda/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/conda/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/conda/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/conda/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/opt/conda/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/conda/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/conda/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import requests
from notebook.notebookapp import list_running_servers
# get server info so that we can make api calls 
servers=list(list_running_servers())

info=next(list_running_servers())
base_url=info['url']
api_url=base_url + 'api/terminals'
api_token=info['token']

# get list of current terminals so that we can reuse this if enough exist 
# otherwise we will create new ones as needed
r=requests.get(url=api_url, headers={'Authorization': 'token ' + api_token})
TERMINALS=r.json()

try:
    EDITORTERM=TERMINALS[0]['name']
except IndexError:
    # create a terminal for our editor
    r=requests.post(url=api_url, headers={'Authorization': 'token ' + api_token})
    c=r.json()
    EDITORTERM=c['name']

try:
    BUILDTERM=TERMINALS[1]['name']
except IndexError:   
    # create a terminal for running out builds
    r=requests.post(url=api_url, headers={'Authorization': 'token ' + api_token})
    c=r.json()
    BUILDTERM=c['name']

try:
    DEBUGGERTERM=TERMINALS[2]['name']
except IndexError:   
    # create a terminal for running gdb
    r=requests.post(url=api_url, headers={'Authorization': 'token ' + api_token})
    c=r.json()
    DEBUGGERTERM=c['name']
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mStopIteration[0m                             Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 6>[0;34m()[0m
[1;32m      3[0m [38;5;66;03m# get server info so that we can make api calls [39;00m
[1;32m      4[0m servers[38;5;241m=[39m[38;5;28mlist[39m(list_running_servers())
[0;32m----> 6[0m info[38;5;241m=[39m[38;5;28;43mnext[39;49m[43m([49m[43mlist_running_servers[49m[43m([49m[43m)[49m[43m)[49m
[1;32m      7[0m base_url[38;5;241m=[39minfo[[38;5;124m'[39m[38;5;124murl[39m[38;5;124m'[39m]
[1;32m      8[0m api_url[38;5;241m=[39mbase_url [38;5;241m+[39m [38;5;124m'[39m[38;5;124mapi/terminals[39m[38;5;124m'[39m

[0;31mStopIteration[0m: 
StopIteration: 

